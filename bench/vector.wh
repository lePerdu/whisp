(defbenchgroup! vector
  (defn! vector-repeat (x n)
    (for ((v empty-vector (vector-append v x)) (i 0 (inc i)))
        ((int>= i n) v)))

  (defbenchgroup! create
    (defbench! empty
      (vector))
    (defbench! singleton
      (vector 1))
    (defbench! length-10
      (vector 0 1 2 3 4 5 6 7 8 9))

    (defbench! length-1000
      (vector-repeat 1 1000))
    (defbench! length-10000
      (vector-repeat 1 10000)))

  (defbenchgroup! iter
    (def! singleton (vector 1))
    (def! length10 (vector 0 1 2 3 4 5 6 7 8 9))
    (def! length1000 (vector-repeat 1 1000))
    (def! length10000 (vector-repeat 1 10000))

    (defbench! empty
      (vector-for-each identity empty-vector))
    (defbench! singleton
      (vector-for-each identity singleton))
    (defbench! length-10
      (vector-for-each identity length10))
    (defbench! length-1000
      (vector-for-each identity length1000))
    (defbench! length-10000
      (vector-for-each identity length10000))))
