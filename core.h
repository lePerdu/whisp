#ifndef CORE_H_
#define CORE_H_

#include <stdint.h>

#include "eval.h"
#include "types.h"

enum intrinsic_id {
  INTRINSIC_FN_START = 0,

  INTRINSIC_IS_INTEGER = INTRINSIC_FN_START,
  INTRINSIC_TO_INT,
  INTRINSIC_INT_ADD,
  INTRINSIC_INT_SUB,
  INTRINSIC_INT_MUL,
  INTRINSIC_INT_DIV,
  INTRINSIC_INT_BITAND,
  INTRINSIC_INT_BITOR,
  INTRINSIC_INT_BITXOR,
  INTRINSIC_INT_BITSHIFT,

  INTRINSIC_INT_LT,
  INTRINSIC_INT_LTE,
  INTRINSIC_INT_GT,
  INTRINSIC_INT_GTE,
  INTRINSIC_INT_EQ,

  INTRINSIC_IS_REAL,
  INTRINSIC_TO_REAL,
  INTRINSIC_REAL_ADD,
  INTRINSIC_REAL_SUB,
  INTRINSIC_REAL_MUL,
  INTRINSIC_REAL_DIV,
  INTRINSIC_REAL_LT,
  INTRINSIC_REAL_LTE,
  INTRINSIC_REAL_GT,
  INTRINSIC_REAL_GTE,
  INTRINSIC_REAL_EQ,
  INTRINSIC_REAL_BITS,

  INTRINSIC_REAL_EXP,
  INTRINSIC_REAL_LOG,
  INTRINSIC_REAL_POW,

  // TODO Get consistent set of equality checks. Current setup is:
  // - =: compares by reference. Works for integers and symbols due to how
  // they are implemented
  // - equal?: structural comparison, working for strings and lists
  // TODO Make equality checks variadic (this one and others)?
  INTRINSIC_IDENTICAL,
  INTRINSIC_OBJECT_ID,
  INTRINSIC_IS_SYMBOL,
  INTRINSIC_IS_FUNCTION,
  INTRINSIC_FUNCTION_NAME,
  INTRINSIC_FUNCTION_SOURCE_INFO,
  INTRINSIC_IS_NULL,
  INTRINSIC_MAKE_CONS,
  INTRINSIC_IS_CONS,
  INTRINSIC_CAR,
  INTRINSIC_CDR,

  INTRINSIC_IS_CHAR,
  // TODO Impl char comparisions via char->int?
  INTRINSIC_CHAR_LT,
  INTRINSIC_CHAR_LTE,
  INTRINSIC_CHAR_GT,
  INTRINSIC_CHAR_GTE,
  INTRINSIC_CHAR_EQ,
  INTRINSIC_CHAR_TO_INT,
  INTRINSIC_INT_TO_CHAR,

  INTRINSIC_IS_STRING,
  INTRINSIC_STRING_EQ,
  INTRINSIC_STRING_COUNT,
  INTRINSIC_STRING_GET,
  INTRINSIC_STRING_TO_SYMBOL,
  INTRINSIC_STRING_TO_INT,
  INTRINSIC_STRING_TO_REAL,
  INTRINSIC_TO_STRING,
  INTRINSIC_WRITE_TO_STRING,

  INTRINSIC_MAKE_STRING_BUILDER,
  INTRINSIC_IS_STRING_BUILDER,
  INTRINSIC_STRING_BUILDER_WRITE_CHAR,
  INTRINSIC_STRING_BUILDER_WRITE_STRING,
  INTRINSIC_STRING_BUIDER_GET_STRING,

  INTRINSIC_IS_ATOM,
  INTRINSIC_MAKE_ATOM,
  INTRINSIC_DEREF,
  INTRINSIC_RESET,

  INTRINSIC_IS_ARRAY,
  INTRINSIC_ALLOC_ARRAY,
  INTRINSIC_ARRAY_LENGTH,
  INTRINSIC_ARRAY_GET,
  INTRINSIC_ARRAY_SET,

  INTRINSIC_OPEN_INPUT_FILE,
  INTRINSIC_IS_INPUT_FILE,
  INTRINSIC_INPUT_FILE_READ_CHAR,
  INTRINSIC_INPUT_FILE_PEEK_CHAR,
  INTRINSIC_INPUT_FILE_READ_STRING,
  INTRINSIC_INPUT_FILE_READ_LINE,
  INTRINSIC_CLOSE_INPUT_FILE,

  INTRINSIC_OPEN_OUTPUT_FILE,
  INTRINSIC_IS_OUTPUT_FILE,
  INTRINSIC_OUTPUT_FILE_WRITE_CHAR,
  INTRINSIC_OUTPUT_FILE_WRITE_STRING,
  INTRINSIC_OUTPUT_FILE_FLUSH,
  INTRINSIC_CLOSE_OUTPUT_FILE,

  INTRINSIC_EOF_OBJECT,
  INTRINSIC_IS_EOF_OBJECT,

  INTRINSIC_FILE_EXISTS,
  INTRINSIC_DELETE_FILE,
  INTRINSIC_CURRENT_DIRECTORY,

  INTRINSIC_BACKTRACE,
  INTRINSIC_RUNTIME,
  INTRINSIC_TIME_MS,
  INTRINSIC_SLEEP,

  INTRINSIC_DYNAMIC_STATE,
  INTRINSIC_SET_DYNAMIC_STATE,
  INTRINSIC_SET_PRIMITIVE_ERROR_HANDLER,
  INTRINSIC_ABORT,
  INTRINSIC_EXIT,

  // Helpers for bootstrapping
  // These can probably be removed/changed once there is a self-hosted compiler
  INTRINSIC_PARSE_FILE,
  INTRINSIC_COMPILE_FILE,
  INTRINSIC_COMPILE_STRING,

  INTRINSIC_DISASSEMBLE,
  INTRINSIC_GET_MACRO_FN,

  INTRINSIC_FN_END,
  INTRINSIC_INTERNAL_START = INTRINSIC_FN_END,

  INTRINSIC_PERPARE_APPLY = INTRINSIC_INTERNAL_START,
  INTRINSIC_COMPILE_TO_CLOSURE,

  INTRINSIC_INVALID,
};

static_assert(INTRINSIC_INVALID <= UINT8_MAX, "too many intrinsics");

enum eval_status call_intrinsic(uint8_t index, struct lisp_vm *vm);

/**
 * Helper function for defining constants in an environment.
 */
void define_const(struct lisp_env *env, const char *name, struct lisp_val v);

void define_builtins(struct lisp_env *global_env);

#endif
