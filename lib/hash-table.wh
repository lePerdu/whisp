;; Hash functions for the common cases

(defn! =-hash (obj)
  (object-id obj))

(def! *string-hash-factor* 31)
(def! *string-hash-max-length* 32)

(defn! string-hash (s)
  (let* ((len (string-count s)) (end (min len *string-hash-max-length*)))
    (string-foldl
      len
      (fn (hash ch)
        (int+ (int* hash *string-hash-factor*) (char->int ch)))
      s
      0
      end)))

(def! *cons-hash-factor* 31)

(defn! cons-hash (hash-fn cell)
  (let ((car-hash (hash-fn (car cell))) (cdr-hash (hash-fn (cdr cell))))
    ; TODO Something more sophisticated?
    (int+ (int* car-hash *cons-hash-factor*) cdr-hash)))

(defn! equal-hash (obj)
  (cond
    ((int? obj) obj)
    ((real? obj) (real-bits obj))
    ((char? obj) (char->int obj))
    ((string? obj) (string-hash obj))
    ((cons? obj) (cons-hash equal-hash obj))
    (else (=-hash obj))))

;; Hash function for numeric comparisons
;; Real values representing integers hash to the same value as the
;; corresponding integer value would
(defn! ==-hash (num)
  (cond
    ((int? num) num)
    ((real? num)
      (if (real-int? num)
        (int num)
        (real-bits num)))
    (else (error "==-hash: argument must be numeric"))))

;; Hash table data structure

(def-mutable-record! <hash-table>
  _build-hash-table
  hash-table?
  (hash-fn hash-table-hash-fn)
  (equal-fn hash-table-equal-fn)
  (count hash-table-count _ht-set-count!)
  (data _ht-data _ht-set-data!))

(def-mutable-record! <hash-entry>
  _make-hash-entry
  hash-entry?
  (hash _hash-entry-hash _hash-entry-set-hash!)
  (key hash-entry-key _hash-entry-set-key!)
  (value hash-entry-value hash-entry-set-value!))

(def! *hash-table-min-capacity* 8)
(def! *hash-table-default-capacity* 8)

;; Round capacity to the nearest power of 2
(defn! _round-capacity (orig)
  ; TODO Is there some bit magic to make this more efficient?
  (for
    ((pow2 *hash-table-min-capacity* (bitshift pow2 1)))
    ((>= pow2 orig) pow2)))

(defn! _ht-make-with-capacity (hash-fn equal-fn capacity)
  (_build-hash-table hash-fn equal-fn 0 (make-array capacity)))

(defn-case! make-hash-table
  ((hash-fn equal-fn)
    (_ht-make-with-capacity hash-fn equal-fn *hash-table-default-capacity*))
  ((hash-fn equal-fn init-capacity)
    (_ht-make-with-capacity hash-fn equal-fn (_round-capacity init-capacity))))

(defn! make-=-hash-table opt-capacity
  (apply* make-hash-table =-hash = opt-capacity))

(defn! make-equal-hash-table opt-capacity
  (apply* make-hash-table equal-hash equal? opt-capacity))

(defn! make-==-hash-table opt-capacity
  (apply* make-hash-table ==-hash == opt-capacity))

(defn! hash-table-capacity (ht)
  (array-length (_ht-data ht)))

(defn! _ht-bucket-index (ht hash)
  (bitand
    (int- (hash-table-capacity ht) 1)
    hash))

;; TODO Should this be part of the hash functions defined above?
;; Or does it make sense to have it hard-coded inside the hash table?
(defn! _ht-rehash (x)
  ;; Source:
  ;; https://lemire.me/blog/2018/08/15/fast-strongly-universal-64-bit-hashing-everywhere/
  ;; Adjusted constants and shifts to be 63-bit
  (let*
    ((x (bitxor x (bitshift x -32)))
     (x (int* x 9174307257865047245))
     (x (bitxor x (bitshift x -33)))
     (x (int* x 4958104740799310931))
     (x (bitxor x (bitshift x -32))))
    x))

(defn! _ht-hash (ht key)
  (_ht-rehash
    ((hash-table-hash-fn ht) key)))

(defn! _ht-get-bucket (ht hash)
  (array-get (_ht-data ht) (_ht-bucket-index ht hash)))

(defn! _hash-entry-matches (ht entry hash key)
  (and
    (= (_hash-entry-hash entry) hash)
    ((hash-table-equal-fn ht) (hash-entry-key entry) key)))

(def! *hash-table-tombstone* (gensym "hash-table-tombstone"))

(defn! _hash-entry-mark-deleted (entry)
  (_hash-entry-set-hash! entry 0)
  (_hash-entry-set-key! entry *hash-table-tombstone*))

(defn! _hash-entry-occupied? (entry)
  (not
    (or (null? entry) (= (hash-entry-key entry) *hash-table-tombstone*))))

(defn! hash-table-contains? (ht key)
  (not
    (= *hash-table-tombstone* (hash-table-get ht key *hash-table-tombstone*))))

(defn! hash-table-get (ht key default)
  (let ((hash (_ht-hash ht key)))
    (let-if (entry (_ht-find-entry ht hash key))
      (hash-entry-value entry)
      default)))

(defn! _ht-find-entry (ht hash key)
  (let*
    ((data (_ht-data ht))
     (capacity (array-length data))
     (start-index (_ht-bucket-index ht hash)))
    (let-named loop ((index start-index))
      (let ((entry (array-get data index)))
        (cond
          ((null? entry) nil)
          ((_hash-entry-matches ht entry hash key) entry)
          (else
            (let ((new-index (rem (inc index) capacity)))
              (if (= new-index start-index)
                nil
                (loop new-index)))))))))

(defn! hash-table-set! (ht key value)
  (hash-table-update! ht key (fn (_) value) nil))

(defn! hash-table-update! (ht key updater default)
  (let ((hash (_ht-hash ht key)))
    (let-if (entry (_ht-find-entry ht hash key))
      (hash-entry-set-value! entry
        (updater (hash-entry-value entry)))
      (_ht-grow-and-insert! ht
        (_make-hash-entry hash key (updater default))))))

(defn! hash-table-set-if-missing! (ht key value)
  (hash-table-update!
    ht
    key
    (fn (current)
      (if (= current *hash-table-tombstone*)
        value
        current))
    *hash-table-tombstone*))

(defn! _ht-grow-and-insert! (ht entry)
  (if (_ht-should-grow ht)
    (_ht-grow! ht))
  (_ht-insert! ht entry)
  (_ht-set-count! ht (inc (hash-table-count ht))))

(defn! _ht-should-grow (ht)
  (>
    (bitshift (int* (hash-table-count ht) 3) -1)
    (hash-table-capacity ht)))

(defn! _ht-grow! (ht)
  (let*
    ((old-data (_ht-data ht))
     (new-data (make-array (bitshift (array-length old-data) 1))))
    (_ht-set-data! ht new-data)
    (array-for-each
      (fn (entry)
        (if (_hash-entry-occupied? entry)
          (_ht-insert! ht entry)))
      old-data)))

(defn! _ht-insert! (ht entry)
  (let ((index (_ht-find-open-index ht (_hash-entry-hash entry))))
    (array-set! (_ht-data ht) index entry)))

(defn! _ht-find-open-index (ht hash)
  (let*
    ((data (_ht-data ht))
     (capacity (array-length data))
     (start-index (_ht-bucket-index ht hash)))
    (let-named loop ((index start-index))
      (if (not (_hash-entry-occupied? (array-get data index)))
        index
        (let ((new-index (rem (inc index) capacity)))
          (if (= new-index start-index)
            (error "hash-table: no open indices")
            (loop new-index)))))))

(defn! hash-table-delete! (ht key)
  (let ((hash (_ht-hash ht key)))
    (let-if (entry (_ht-find-entry ht hash key))
      (do
        (_hash-entry-mark-deleted entry)
        (_ht-set-count! ht (dec (hash-table-count ht)))))))

(defn! hash-table-for-each-entry (f ht)
  (array-for-each
    (fn (entry)
      (if (_hash-entry-occupied? entry)
        (f entry)))
    (_ht-data ht)))

(defn! hash-table-for-each (f ht)
  (array-for-each
    (fn (entry)
      (if (_hash-entry-occupied? entry)
        (f (hash-entry-key entry) (hash-entry-value entry))))
    (_ht-data ht)))

(defn! hash-table-fold-entries (init f ht)
  (array-foldl
    init
    (fn (acc entry)
      (if (_hash-entry-occupied? entry)
        (f acc entry)
        acc))
    (_ht-data ht)))

(defn! hash-table-fold (init f ht)
  (array-foldl
    init
    (fn (acc entry)
      (if (_hash-entry-occupied? entry)
        (f acc (hash-entry-key entry) (hash-entry-value entry))
        acc))
    (_ht-data ht)))

(defn! hash-table-map (f ht)
  (hash-table-fold
    (make-hash-table
      (hash-tabel-hash-fn ht)
      (hash-table-equal-fn ht)
      (hash-table-count ht))
    (fn (new-ht key value)
      (hash-table-set! new-ht key (f value)))
    ht))

(defn! alist->hash-table (hash-fn equal-fn alist)
  (let ((ht (make-hash-table hash-fn equal-fn (count alist))))
    (for-each
      (fn (item)
        (hash-table-set-if-missing! ht (car item) (cdr item)))
      alist)
    ht))

(defn! alist->=-hash-table (alist)
  (alist->hash-table =-hash = alist))

(defn! alist->==-hash-table (alist)
  (alist->hash-table ==-hash == alist))

(defn! alist->equal-hash-table (alist)
  (alist->hash-table equal-hash equal? alist))

(defn! hash-table->alist (ht)
  (hash-table-fold
    nil
    (fn (alist key value) (acons key value alist))
    ht))
