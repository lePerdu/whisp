; TODO Should these be the builtins? (they are more useful than display and
; newline and more efficient to implement as builtins)

(defn! (string->list str) (do
  (defn! (rec acc index)
    (if (= index 0)
      acc
      (let ((i (dec index)))
        (rec (cons (string-get str i) acc) i))))
  (rec nil (string-count str))))

(defn! (char->string chr)
  (if (char? chr)
    (->string chr)
    (error "char->string: must be of type char")))

; TODO These are very inefficient as non-builtins since they allocate a lot of
; intermediate strings

(defn! (list->string lst)
  (apply string-concat (map char->string lst)))

(defn! (substring str . opt-start-end) (do
  (def! n-extra (count opt-start-end))

  (def! start
    (if (>= n-extra 1)
      (car opt-start-end)
      0))
  (def! end
    (if (>= n-extra 2)
      (cadr opt-start-end)
      (string-count str)))

  ; TODO Bounds checking
  (defn! (rec acc index)
    (if (= index end)
      acc
      (rec
        (string-concat acc (->string (string-get str index)))
        (inc index))))

  (if (> n-extra 2)
    (error "substring: too many arguments"))
  (rec "" start)))
