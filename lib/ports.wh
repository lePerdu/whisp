(def! current-input-port (make-parameter *stdin-port*))
(def! current-output-port (make-parameter *stdout-port*))
(def! current-error-port (make-parameter *stderr-port*))

;; Internal generic methods used behind the scenes

(defgeneric! input-port? (port))
(defmethod! input-port? (_) false)
(defgeneric! input-port-read-char (port))
(defgeneric! input-port-peek-char (port))
(defgeneric! input-port-read-string (port n))
(defgeneric! input-port-read-string-all (port))
(defgeneric! input-port-read-line (port))
(defgeneric! close-input-port (port))

(defgeneric! output-port? (port))
(defmethod! output-port? (_) false)
(defgeneric! output-port-write-char (port ch))
(defgeneric! output-port-write-string (port s))
(defgeneric! output-port-flush (port))
(defgeneric! close-output-port (port))

;; Default implementation for read-string-all via read-string
(def! *read-string-all-chunk-size* 4096)
(defmethod! input-port-read-string-all (port)
  (let ((buffer (make-output-string)))
    (let-named loop ()
      ; TODO: Make default impl (input-port-read-string port max-int)?
      ; TODO: Method to read directly from file into output-string
      ; to avoid re-allocating each chunk
      ; TODO: Grow read size each time?
      (let ((chunk (input-port-read-string port *read-string-all-chunk-size*)))
        (if (eof-object? chunk)
          (output-string-get buffer)
          (do
            (output-string-write-string buffer chunk)
            (loop)))))))

;; File I/O

(defmethod! input-port? ((input-file? port)) true)
(defmethod! input-port-peek-char ((input-file? port))
  (input-file-peek-char port))
(defmethod! input-port-read-char ((input-file? port))
  (input-file-read-char port))
(defmethod! input-port-read-string ((input-file? port) n)
  (input-file-read-string port n))
(defmethod! input-port-read-line ((input-file? port))
  (input-file-read-line port))
(defmethod! close-input-port ((input-file? port))
  (close-input-file port))

(defmethod! output-port? ((output-file? port)) true)
(defmethod! output-port-write-char ((output-file? port) ch)
  (output-file-write-char port ch))
(defmethod! output-port-write-string ((output-file? port) s)
  (output-file-write-string port s))
(defmethod! output-port-flush ((output-file? port))
  (output-file-flush port))
(defmethod! close-output-port ((output-file? port))
  (close-output-file port))

(defmacro! defn-with-default-port! (name req-args port-arg default-param body)
  `(defn-case! ~name
    (~req-args (~name ~@req-args (~default-param)))
    ((~@req-args ~port-arg) ~body)))

;; String I/O

(def-mutable-record! <input-string>
  _make-input-string
  input-string?
  (buffer _input-string-buffer)
  (pos _input-string-pos _set-input-string-pos!))

(defn! make-input-string (buffer)
  (_make-input-string buffer 0))

(defn! _input-string-finished (is)
  (int>= (_input-string-pos is) (string-count (_input-string-buffer is))))

(defn! _input-string-peek (is)
  (if (_input-string-finished is)
    (eof-object)
    (string-get (_input-string-buffer id) (_input-string-pos is))))

(defmethod! input-port? ((input-string? port)) true)
(defmethod! input-port-peek-char ((input-string? port))
  (_input-string-peek port))
(defmethod! input-port-read-char ((input-string? port))
  (let ((ch (_input-string-peek port)))
    ; Doesn't hurt to always advance the position and it makes the code simpler
    (_set-input-string-pos! port (inc _input-string-pos port))
    ch))
(defmethod! input-port-read-string ((input-string? port) n)
  (let*
    ((pos (_input-string-pos port))
     (buf (_input-string-buffer port))
     (end (string-count buf))
     (read-end (min end (int+ pos n)))
     (str (substring buf pos read-end)))
    (_set-input-string-pos! port read-end)
    (if (string-null? str)
      (eof-object)
      str)))
(defmethod! input-port-read-string-all ((input-string? port))
  (let*
    ((pos (_input-string-pos port))
     (buf (_input-string-buffer port))
     (end (string-count buf))
     (str (substring buf pos end)))
    (_set-input-string-pos! port end)
    (if (string-null? str)
      (eof-object)
      str)))
(defmethod! input-port-read-line ((input-string? port))
  (let*
    ((buf (_input-string-buffer port))
     (pos (_input-string-pos port))
     (newline-pos (string-index buf char-newline? pos))
     (read-end
       (if newline-pos
         (inc newline-pos)
         (string-count buf)))
     (str (substring buf pos read-end)))
    (_set-input-string-pos! port read-end)
    (if (string-null? str)
      (eof-object)
      str)))
(defmethod! close-input-port ((input-string? port))
  ; Just set to the end so later reads will give eof
  (_set-input-string-pos! port
    (string-count (_input-string-buffer port))))

(defmethod! output-port? ((output-string? port)) true)
(defmethod! output-port-write-char ((output-string? port) ch)
  (output-string-write-char port ch))
(defmethod! output-port-write-string ((output-string? port) s)
  (output-string-write-string port s))
(defmethod! output-port-flush ((output-string? port))
  ; No-op
  nil)
(defmethod! close-output-port ((output-string? port))
  ; Just clear it. It can be used again without issue
  (output-string-get port)
  nil)

;; Input wrappers

(defn-with-default-port! read-char () port current-input-port
  (input-port-read-char port))

(defn-with-default-port! peek-char () port current-input-port
  (input-port-peek-char port))

(defn-with-default-port! read-string (n) port current-input-port
  (input-port-read-string port n))

(defn-with-default-port! read-line () port current-input-port
  (input-port-read-line port))

;; Output wrappers

(defn-with-default-port! write-char (c) port current-output-port
  (output-port-write-char port c))

(defn-with-default-port! write-string (s) port current-output-port
  (output-port-write-string port s))

(defn-with-default-port! flush-output-port () port current-output-port
  (output-port-flush port))

;; Type-agnostic

(defn! port? (port)
  (or (input-port? port) (output-port? port)))

(defn! close-port (port)
  (if (input-port? port) (close-input-port port))
  (if (output-port? port) (close-output-port port)))

;; Auto-closing

(defn! call-with-cleanup-handler (cleanup proc)
  (with-exception-handler
    ; TODO How should this interact with escape continuations?
    ; Currently, it just forbids/ignores them
    (fn (err) (cleanup) (raise err))
    (fn ()
      (let ((return (proc)))
        (cleanup)
        return))))

(defn! call-with-port (port proc)
  (call-with-cleanup-handler
    (fn () (close-port port))
    (fn () (proc port))))

(defn! call-with-input-file (filename proc)
  (call-with-port (open-input-file filename) proc))

(defn! call-with-output-file (filename proc)
  (call-with-port (open-output-file filename) proc))

(defn! with-input-from-file (filename proc)
  (call-with-input-file
    filename
    (fn (file-port)
      (parameterize ((current-input-port file-port)) (proc)))))

(defn! with-output-to-file (filename proc)
  (call-with-output-file
    filename
    (fn (file-port)
      (parameterize ((current-output-port file-port)) (proc)))))

;; Printing

(defn-with-default-port! newline () port current-output-port
  (output-port-write-char port #\newline))

(defn-with-default-port! display (x) port current-output-port
  (output-port-write-string port (->string x)))

(defn! print args
  (when (not (null? args))
    ; Print first without space
    (display (car args))
    (for-each
      (fn (x) (display " ") (display x))
      (cdr args))))

(defn! println args
  (apply print args)
  (newline))

;; Path operations

(defn! path-join parts
  (apply string-concat
    (intersperse (->string *path-separator*) parts)))

(defn! path-separator? (c)
  (char= c *path-separator*))

(defn! path-directory (path)
  (let-if (slash-index (string-rindex path path-separator?))
    (substring path 0 slash-index)
    ; Full path if there is no slash
    path))

(defn! path-absolute? (path)
  (and (not (string-null? path)) (path-separator? (string-get path 0))))

(defn! path-relative? (path)
  (not (path-absolute? path)))

;; Exit functions

(defn! convert-exit-status (status)
  (cond
    ((= status true) 0)
    ((null? status) 1)
    ((int? status) status)
    (else (error "exit: invalid status code" status))))

(defn-case! exit
  (() (system-exit 0))
  ((arg) (system-exit (conver-exit-status arg))))
