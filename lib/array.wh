(defn! (list->array elems)
  (let* ((n (count elems)) (arr (make-array n)))
    (let-named loop
      ((i 0) (rest elems))
      (if (= i n)
        arr
        (do
          (array-set! arr i (car rest))
          (loop (inc i) (cdr rest)))))))

(defn! (array->list arr)
  (let-named loop ((acc nil) (index (dec (array-length arr))))
    (if (= index -1)
      acc
      (loop
        (cons (array-get arr index) acc)
        (dec index)))))

(defn! (array . elems) (list->array elems))

(defn! (array-update! arr i f)
  (array-set! arr i (f (array-get arr i))))

;; Persistent operations which return new array instead of mutating

(defn! (array-map f arr)
  (let* ((n (array-length arr)) (new (make-array n)))
    (let-named loop ((i 0))
      (if (= i n)
        new
        (do
          (array-set! new i (f (array-get arr i)))
          (loop (inc i)))))))

; TODO Define as primitive? Then it can be a simple alloc + memcpy
(defn! (array-copy arr) (array-map identity arr))

; Persistent set (returns a new array)
(defn! (array-set arr i value)
  (let ((copy (array-copy arr)))
    (do
      (array-set! copy i value)
      copy)))

(defn! (array-update arr i f)
  (array-set arr i (f (array-get arr i))))

; Persistent append
(defn! (array-append arr value)
  (let
    ((old-len (array-length arr))
     (new-arr (make-arr (inc old-len))))
    (let-named loop ((i 0))
      (if (= i old-len)
        (do
          (array-set! new-arr i value)
          new-arr)
        (do
          (array-set! new-arr i (array-get arr i))
          (loop (inc i)))))))
