; Old behavior was different when macros are defined on top-level,
; so keep them here to detect such bugs
(defmacro! replace-with-2 args 2)
(defmacro! noop-macro (arg) arg)

(defgroup! macro-expansion
  (deftest! simple-macro-replaced
    (assert= 2 (replace-with-2)))

  (deftest! nested-macro-replaced
    (assert= 2 (noop-macro (replace-with-2 abc))))

  (defgroup! macroexpand-1
    (deftest! expands-only-layer
      (assert=
        2
        (macroexpand-1 '(replace-with-2 abc))))
    (deftest! expands-1-layer
      (assert-equal
        (list 'replace-with-2 'abc)
        (macroexpand-1 '(noop-macro (replace-with-2 abc)))))

    (deftest! does-not-expand-non-head-position
      (assert-equal
        (list 'if 1 (list 'replace-with-2 'abc))
        (macroexpand-1 '(if 1 (replace-with-2 abc))))))

  (defgroup! macroexpand
    (deftest! expands-only-layer
      (assert=
        2
        (macroexpand '(replace-with-2 abc))))
    (deftest! expands-2-layers
      (assert-equal
        2
        (macroexpand '(noop-macro (replace-with-2 abc)))))
    (deftest! does-not-expand-non-head-position
      (assert-equal
        (list 'if 1 (list 'replace-with-2 'abc))
        (macroexpand '(if 1 (replace-with-2 abc))))))

  ; TODO Figure out semantics for this. Ideally it should work exactly like
  ; evaluation, but that's hard to do since it needs to not expand inside
  ; special forms, but only if those special forms are not shadowed.
  (comment defgroup! macroexpand-all
    (deftest! expands-only-layer
      (assert=
        2
        (macroexpand-all '(replace-with-2 abc))))
    (deftest! expands-2-layers
      (assert-equal
        2
        (macroexpand-all '(noop-macro (replace-with-2 abc)))))
    (deftest! expands-non-head-position
      (assert-equal
        (list 'if 1 2)
        (macroexpand-all '(if 1 (replace-with-2 abc)))))
    (deftest! does-not-expand-in-quote
      (assert-equal
        (list 'quote (list 'replace-with-2 'abc))
        (macroexpand-all '(quote (replace-with-2 abc))))))

  (deftest! quote-special-syntax-same-as-form
    (assert-equal '(1 2) (quote (1 2))))

  (deftest! macros-not-replaced-in-quote
    (assert (symbol? 'replace-with-2))
    (assert-equal (list 'replace-with-2 'abc) '(replace-with-2 abc)))

  (deftest! macros-expanded-in-inner-scope
    (defmacro! twice (expr) (list 'do expr expr))

    (defn! f ()
      (def! a (atom 0))
      (twice (swap! a inc))
      @a)
    (assert= 2 (f)))

  (deftest! macros-expanded-in-scope
    (defn! f ()
      (defmacro! twice (expr) (list 'do expr expr))
      (def! a (atom 0))
      (twice (swap! a inc))
      @a)
    (assert= 2 (f)))

  (deftest! macros-shadowed-in-scope
    (defmacro! twice (expr) (list 'do expr expr))

    (defn! f ()
      ; Bad definition of twice
      (defmacro! twice (expr) (list 'do expr))
      (def! a (atom 0))
      (twice (swap! a inc))
      @a)
    (assert= 1 (f)))

  (deftest! macros-not-expanded-in-outer-scope
    (def! a (atom 0))
    (defn! f ()
      (defmacro! twice (expr) (list 'do expr expr))
      nil)
    (f)

    (assert-error (twice (swap! a inc)))))

(defgroup! standard-macros
  (defgroup! gensym
    (deftest! symbols-unique
      (assert-not= (gensym) (gensym)))
    (deftest! unique-with-custom-name
      (assert-not= (gensym "abc") (gensym "abc")))
    (deftest! unique-with-custom-symbol-name
      (assert-not= (gensym 'def) (gensym 'def)))
    (deftest! unique-with-custom-int-name
      (assert-not= (gensym 30) (gensym 30)))
    (deftest! unique-with-custom-name-of-different-type
      (assert-not= (gensym "30") (gensym 30))
      (assert-not= (gensym 'abc) (gensym "abc"))))

  (defgroup! comment-macro
    (deftest! comment-not-executed
      (def! a (atom 5))
      (comment (reset! a 6))
      (assert= 5 @a))
    (deftest! def!-after-comment
      (assert= 5
        ; Wrap in eval since it's a compiler test
        ; Wrap in `let` to ensure the new scope
        (eval
          '(let ()
            (comment "stuff")
            (def! a 5)
            a)))))

  (defgroup! let-cons
    (deftest! extracts-first
      (assert= 1 (let-cons ((a . b) (cons 1 2)) a)))
    (deftest! extracts-second
      (assert= 2 (let-cons ((a . b) (cons 1 2)) b)))
    (deftest! extracts-tail-of-list
      (assert-equal (list 2 3 4) (let-cons ((a . b) (list 1 2 3 4)) b)))
    (deftest! error-for-non-cons
      (assert-error (let-cons ((a . b) nil) b))))

  (defgroup! let-if
    (deftest! binds-non-nil-value
      (assert= 3 (let-if (a 2) (+ 1 a))))
    (deftest! binds-0-value
      (assert= 1 (let-if (a 0) (+ 1 a))))
    (deftest! runs-false-branch-for-nil
      (assert= 2 (let-if (a nil) (+ 1 a) 2)))
    (deftest! does-not-bind-for-nil
      (assert= 'outer
        (let ((a 'outer))
          (let-if (a nil) (+ 1 a) a))))
    (deftest! runs-expr-once
      (def! a (atom 0))
      (assert= 1
        (let-if (a (swap! a inc)) a))
      (assert= 1 @a)))

  (defgroup! let-if-cons
    (deftest! extracts-first
      (assert= 1 (let-if-cons ((a . b) (cons 1 2)) a)))
    (deftest! extracts-second
      (assert= 2 (let-if-cons ((a . b) (cons 1 2)) b)))
    (deftest! extracts-tail-of-list
      (assert-equal (list 2 3 4) (let-if-cons ((a . b) (list 1 2 3 4)) b)))
    (deftest! run-false-branch-on-nil
      (assert= 2
        (let-if-cons
          ((a . b) nil) b 2)))
    (deftest! run-false-branch-on-number
      (assert= 2
        (let-if-cons
          ((a . b) 7) b 2)))
    (deftest! does-not-bind-for-non-cons
      (assert= 'outer
        (let ((a 'outer))
          (let-if-cons ((a . b) nil) (+ a b) a)))))

  (defgroup! let-named
    (deftest! call-binding-in-tail-pos
      (assert= 55 (let-named loop ((acc 0) (n 10))
        (if (= n 0)
          acc
          (loop (+ acc n) (dec n))))))
    (deftest! call-binding-in-non-tail-pos
      (assert= 55 (let-named rec ((n 10))
        (if (= n 0)
          0
          (+ n (rec (dec n))))))))

  (defgroup! for
    (deftest! no-body
      (assert= 55
        (for ((i 1 (inc i)) (total 0 (+ total i)))
            ((> i 10) total))))
    (deftest! binding-without-step-remains-constant
      (assert= 10
        (for ((cell (atom 0)) (i 1 (inc i)))
            ((> i 10) @cell)
          (reset! cell i))))
    (deftest! multiple-return-exprs
      (def! a (atom 0))
      (assert= 5
        (for ((i 1 (inc i)))
            ((>= i 10) (reset! a i) 5)))
      (assert= 10 @a))
    (deftest! multiple-body-exprs
      (def! a (atom 10))
      (assert= 5
        (for ((i 10 (dec i)))
            ((< i 0) 5)
          (- 5 4)
          (reset! a i)))
      (assert= 0 @a)))

  (defgroup! quasiquote
    (deftest! backtick-syntax
      (assert-equal (list 'quasiquote 3) '`3))
    (deftest! tilde-syntax
      (assert-equal (list 'unquote 'a) '~a))
    (deftest! tilde-at-syntax
      (assert-equal (list 'splice-unquote 'a) '~@a))

    (deftest! string
      (assert-equal "abc" `"abc"))
    (deftest! number
      (assert= 5 `5))
    (deftest! plain-list
      (assert-equal (list 1 "2" 'three 4.0) `(1 "2" three 4.0)))
    (deftest! expression
      (assert-equal (list '+ 1 2) `(+ 1 2)))
    (deftest! nested-and-improper-lists
      (assert-equal
        (list* 'list
          (list (cons 'x (cons 6 'z))) "3" 4)
         `(list ((x . (6 . z))) "3" . 4)))
    (deftest! nested-quote
      (assert-equal
        (list (list 'quote 'x))
        `('x)))

    (defgroup! unquote
      (deftest! top-level
        (assert= 4 `~(+ 1 3)))
      (deftest! inside-list
        (assert-equal
          (list 2 4 6 8)
          `(2 ~(+ 1 3) 6 ~(* 4 2))))
      (deftest! start-of-improper-list
        (assert-equal (cons 2 4) `(2 . ~(+ 1 3))))
      (deftest! end-of-improper-list
        (assert-equal (cons 4 2) `(~(+ 1 3) . 2)))
      (deftest! inside-deep-list
        (assert-equal
          (list 1 (list 2 (list 3 4 5)) 6)
          `(1 (2 (3 ~(- 6 2) 5)) 6))))

    (defgroup! splice-unquote
      (deftest! not-expanded-at-top-level
        (assert-equal
          (list 'splice-unquote (list 'list '(+ 0 1) 2))
          `~@(list (+ 0 1) 2)))
      (deftest! expanded-at-start-of-list
        (assert-equal
          (list 1 2 'x)
          `(~@(list (+ 0 1) 2) x)))
      (deftest! expanded-at-end-of-list
        (assert-equal
          (list 'x 1 2)
          `(x ~@(list (+ 0 1) (/ 4 2)))))
      (deftest! expanded-in-middle-of-list
        (assert-equal
          (list 'x 1 2 'y)
          `(x ~@(list (+ 0 1) (/ 4 2)) y)))
      (deftest! expanded-in-improper-list
        (assert-equal
          (list* 'x 1 2 'y)
          `(x ~@(list (+ 0 1) (/ 4 2)) . y)))
      (deftest! not-expanded-at-end-of-improper-list
        (assert-equal
          (list 'x 'splice-unquote '(list (+ 0 1) (/ 4 2)))
          `(x . ~@(list (+ 0 1) (/ 4 2)))))
      (deftest! expands-empty-list
        (assert-equal
          (list 'x 'y)
          `(x ~@(list) y))))

    (deftest! unquote-and-splice-unquote
      (assert-equal
        (list 5 4 3 2 1)
        `(5 ~(+ 3 1) ~@(list 3 2) 1 ~@nil)))

    (defgroup! nested-quasiquote
      (deftest! unquote-expanded-in-outer
        (assert-equal
          (list
            (list 'quasiquote
              (list 'x 3 'z)))
          `(`(x ~(+ 1 2) z))))
      (deftest! splice-unquote-expanded-in-outer
        (assert-equal
          (list
            (list 'quasiquote
              (list 'x 'w 5 'z)))
          `(`(x ~@(list 'w 5) z))))
      (deftest! expanded-when-inside-unquote
        (assert-equal
          (list 'x (list (list 'w 4 5)) 'z)
          `(x ~(list `(w ~(- 7 3) 5)) z))))))
