(def! *all-tests* (atom nil))
(def! *test-group-prefix* "")

(defrecord! <test-entry>
  make-test-entry
  test-entry?
  (name test-entry-name)
  (func test-entry-func))

(defmacro! (deftest! name . body)
  (let ((label (->string name)))
    `(let ((test-fn (fn-named ~name () ~(cons 'do body))))
      (swap! *all-tests*
        (fn (all-tests)
          (cons
            (make-test-entry
              (string-concat *test-group-prefix* ~label)
              test-fn)
            all-tests))))))

(defmacro! (defgroup! name . body)
  (let ((label (->string name)))
    `(let
      ((*test-group-prefix*
        (string-concat *test-group-prefix* ~label " > ")))
      ~(cons 'do body))))

(defrecord! <test-failure>
  make-test-failure
  test-failure?
  (entry test-failure-entry)
  (error test-failure-error)
  (backtrace test-failure-backtrace))

;; Run a test, returning any error encountered, or nil on success
(defn! (run-test test)
  (print "RUNNING" (test-entry-name test))
  (print " ... ")
  (flush-output-port)
  (guard
    (err
      (else
        (println "FAIL")
        (make-test-failure test err (backtrace))))
    ((test-entry-func test))
    (println "PASS")
    ; Return nil to indicate no error
    nil))

(defn! (run-all-tests)
  (let*
    ((tests-in-order (reverse @*all-tests*))
     (failing-tests-with-results (filter-map run-test tests-in-order))
     (total-count (count @*all-tests*))
     (fail-count (count failing-tests-with-results))
     (pass-count (- total-count fail-count)))
    ; TODO Clear out tests?
    (newline)
    (println "TESTS RAN:" total-count)
    (println "PASSED:" pass-count)
    (println "FAILED:" fail-count)
    (if (null? failing-tests-with-results)
      (println "ALL TESTS PASSED!")
      (do
        (println "FAILING TESTS:")
        (for-each
          (fn (failed)
            (println (test-entry-name (test-failure-entry failed)) ":")
            (println (exception->string (test-failure-error failed)))
            (print-backtrace (test-failure-backtrace failed))
            (println))
          failing-tests-with-results)
        (error 'test-suite-failed)))))

; Assertion helpers

(defn! (assert-make-error expr metadata)
  (error (concat (list 'assert-failed expr) metadata)))

(defmacro! (assert expr . extra)
  `(if (not ~expr)
    (assert-make-error '~expr ~(cons 'list extra))))

(defmacro! (assert-not expr . extra)
  `(if ~expr
    (assert-make-error '(not ~expr) ~(cons 'list extra))))

(defmacro! (assert= expected actual)
  `(assert (= ~expected ~actual) 'expected ~expected 'got ~actual))

(defmacro! (assert-not= expected actual)
  `(assert (not (= ~expected ~actual)) 'expected-not ~expected))

(defmacro! (assert== expected actual)
  `(assert (== ~expected ~actual) 'expected ~expected 'got ~actual))

(defmacro! (assert-not== expected actual)
  `(assert (not (== ~expected ~actual)) 'expected-not ~expected))

(defmacro! (assert-not-equal expected actual)
  `(assert (not (equal? ~expected ~actual)) 'expected-not ~expected))

(defmacro! (assert-equal expected actual)
  `(assert (equal? ~expected ~actual) 'expected ~expected 'got ~actual))

(defmacro! (assert-error expr)
  `(if (guard (err (else false)) ~expr true)
    (assert-make-error '~expr (list 'expected-error))))
