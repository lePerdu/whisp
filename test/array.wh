(defgroup! array
  (defsyntax! (assert-array-not-equal expected actual)
    `(assert (not (array-equal? ~expected ~actual)) 'expected-not ~expected))

  (defsyntax! (assert-array-equal expected actual)
    `(assert (array-equal? ~expected ~actual) 'expected ~expected 'got ~actual))

  (defgroup! list->array->list
    (defn! (round-trip lst)
      (assert-equal lst (array->list (list->array lst))))
    (deftest! empty (round-trip nil))
    (deftest! singleton (round-trip (list 1)))
    (deftest! many-elems (round-trip (list 1 2 3 4 5))))

  (deftest! array-function
    (assert-array-equal (array 1 2 3) (list->array (list 1 2 3))))

  (defgroup! array-get-set!
    (deftest! get-after-set
      (def! a (make-array 4))
      (array-set! a 0 'one)
      (assert= 'one (array-get a 0))
      (array-set! a 3 'end)
      (assert= 'end (array-get a 3)))
    (deftest! get-after-set-with-alias
      (def! a (make-array 4))
      (def! b a)
      (array-set! a 0 'one)
      (assert= 'one (array-get b 0))
      (array-set! b 3 'end)
      (assert= 'end (array-get a 3)))
    (deftest! get-after-end-is-error
      (def! a (make-array 4))
      (assert-error (array-get a 4))
      (assert-error (array-set! a 4 'x)))
    (deftest! negative-index-is-error
      (def! a (make-array 4))
      (assert-error (array-get a -4))
      (assert-error (array-set! a -4 'x)))
    (deftest! get-non-int-is-error
      (def! a (make-array 4))
      (assert-error (array-get a "1"))
      (assert-error (array-get a 2.5))
      (assert-error (array-get a 2.0))
      (assert-error (array-set! a "1" 'y))
      (assert-error (array-set! a 2.5 'y))
      (assert-error (array-set! a 2.0 'y))))

  (defgroup! array-length
    (deftest! empty-array
      (assert= 0 (array-length (make-array 0))))
    (deftest! non-empty-array
      (assert= 5 (array-length (make-array 5))))
    (deftest! does-not-change-after-set
      (def! a (make-array 5))
      (array-set! a 4 4)
      (assert= 5 (array-length a))))

  (defgroup! array-equal?
    (deftest! empty-arrays-equal
      (assert (array-equal? (make-array 0) (make-array 0))))
    (deftest! matching-elems-equal
      (assert (array-equal? (array 1 "2") (array 1 "2"))))
    (deftest! non-matching-elems-not-equal
      (assert (not (array-equal? (array 1 "2") (array "2" 1)))))
    (deftest! non-matching-lengths-not-equal
      (assert (not (array-equal? (array 1 "2") (array 1 "2" 3))))))

  (defgroup! array-set
    (deftest! changes-single-element
      (def! a (array 1 2 3 4 5))
      (def! b (array-set a 2 8))
      (assert-array-equal (array 1 2 8 4 5) b))
    (deftest! does-not-modify-existing-array
      (def! a (array 1 2 3 4 5))
      (array-set a 2 8)
      (assert= 3 (array-get a 2))))

  (defgroup! array-append
    (deftest! appends-single-element
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 1 2 3 4 5 8) (array-append a 8)))
    (deftest! does-not-modify-existing-array
      (def! a (array 1 2 3 4 5))
      (array-append a 8)
      (assert= 5 (array-length a))))

  (defgroup! array-sub
    (deftest! extract-start-to-middle
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 1 2) (array-sub a 0 2)))
    (deftest! extract-middle-to-end
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 4 5) (array-sub a 3 5)))
    (deftest! extract-middle-to-middle
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 2 3 4) (array-sub a 1 4)))
    (deftest! extract-empty-in-middle
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array) (array-sub a 2 2)))
    (deftest! extract-whole-array
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 1 2 3 4 5) (array-sub a 0 5)))
    (deftest! does-not-modify-existing-array
      (def! a (array 1 2 3 4 5))
      (array-sub a 1 3)
      (assert-array-equal (array 1 2 3 4 5) a)))

  (defgroup! array-map
    (deftest! applies-to-all-elemenst
      (def! a (array 1 2 3 4 5))
      (assert-array-equal (array 2 3 4 5 6) (array-map inc a)))
    (deftest! does-not-modify-existing-array
      (def! a (array 1 2 3 4 5))
      (array-map int a)
      (assert= 3 (array-get a 2)))
    (deftest! f-not-called-for-empty-array
      (array-map (fn (x) (error "should not be called")) (make-array 0)))))
