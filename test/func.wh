(defgroup! function
  ; Environment-related function tests are in env.wh

  (defgroup! fn-syntax
    (deftest! no-args
      (assert= 1 ((fn () 1))))
    (deftest! no-args-with-nil
      (assert= 1 ((fn nil 1))))
    (deftest! variadic-with-requied-args
      (assert-equal (list 2 3) ((fn (a . rest) rest) 1 2 3)))
    (deftest! variadic-without-requied-args
      (assert-equal (list 1 2 3) ((fn all-args all-args) 1 2 3)))
    (deftest! rejects-non-symbol-param
      ; Wrap in eval so the test compiles
      (assert-error (eval '(fn (a 1) a)))
      (assert-error (eval '(fn (a (b c)) a)))
      (assert-error (eval '(fn (a . 1) a))))
    (deftest! accepts-no-expr
      ; TODO Guarantee return value?
      (fn ()))
    (deftest! accepts-multiple-exprs
      (def! a (atom 0))
      (assert= 6 ((fn () (reset! a 5) 6)))
      (assert= 5 @a)))

  (defgroup! variadic-fn
    (deftest! accepts-0-args
      (defn! f args (count args))
      (assert= 0 (f)))
    (deftest! accepts-multiple-args
      (defn! f args (count args))
      (assert= 4 (f 'a 2 (list 90 91) "123")))
    (deftest! requires-non-variadic-args
      (defn! f (a b . rest) (+ a b (count rest)))
      (assert-error (f 1)))
    (deftest! accepts-0-args-after-required
      (defn! f (a b . rest) (+ a b (count rest)))
      (assert= 3 (f 1 2)))
    (deftest! accepts-multple-args-after-required
      (defn! f (a b . rest) (+ a b (count rest)))
      (assert= 6 (f 1 2 'a (list 90 91) "123"))))

  (defgroup! fn-case
    ; TODO Decide which of these are intentional behavior
    (deftest! single-pattern-works-like-fn
      (def! f (fn-case
        ((a b) (list "two" a b))))
      (assert-error (f 1))
      (assert-equal '("two" abc 123) (f 'abc 123))
      (assert-error (f 1 2 3)))
    (deftest! accepts-no-expr
      ; TODO Guarantee return value?
      (fn-case (())))
    (deftest! accepts-multiple-exprs
      (def! a (atom 0))
      (assert= 6 ((fn-case (() (reset! a 5) 6))))
      (assert= 5 @a))
    (deftest! zero-to-3-args
      (def! f (fn-case
        (() "zero")
        ((a) (list "one" a))
        ; Share arg names
        ((a b) (list "two" a b))
        ; Different arg names
        ((x y z) (list "three" x y z))))
      (assert-equal "zero" (f))
      (assert-equal '("one" 1) (f 1))
      (assert-equal '("two" 2 1) (f 2 1))
      (assert-equal '("three" three 2 1) (f 'three (+ 1 1) 1))
      (assert-error (f 1 2 3 4)))
    (deftest! skip-arg-count
      (def! f (fn-case
        ((a) (list "one" a))
        ((c b a) (list "three" c b a))))
      (assert-equal '("one" x) (f 'x))
      (assert-error (f 1 2))
      (assert-equal '("three" 1 2 3) (f 1 2 3)))
    (deftest! single-variadic-pattern
      (def! f (fn-case
        ((first . rest) (list rest 'before first))))
      (assert-error (f))
      (assert-equal '(nil before 1) (f 1))
      (assert-equal '((2) before 1) (f 1 2))
      (assert-equal '((2 3 4 5) before a) (f 'a 2 3 4 5)))
    (deftest! simple-or-variadic-pattern
      (def! f (fn-case
        ((a b) (list "two" a b))
        ((a . rest) (list "more" a rest))))
      (assert-equal '("more" 1 nil) (f 1))
      (assert-equal '("two" 1 2) (f 1 2))
      (assert-equal '("more" 1 (2 3)) (f 1 2 3)))
    (deftest! simple-or-variadic-pattern-of-same-required-count
      (def! f (fn-case
        ((a b) (list "two" a b))
        ((a b . rest) (list "more" a b rest))))
      (assert-equal '("two" 1 2) (f 1 2))
      (assert-equal '("more" 1 2 (3 4 5)) (f 1 2 3 4 5)))
    (deftest! matches-shorter-variadic-match-if-later
      (def! f (fn-case
        ((a b . rest) (list "many" a b rest))
        ; Not very useful, as it only matches a single argument, but
        ; might as well check that it behaves correctly
        (fewer (list "few" fewer))))
      (assert-equal '("few" (single)) (f 'single))
      (assert-equal '("many" 1 2 nil) (f 1 2))
      (assert-equal '("many" 1 2 (3 4 5)) (f 1 2 3 4 5)))
    (deftest! arg-names-from-other-branches-not-bound
      (def! f
        ; Bind them first to check if bound by fn-case
        (let ((a 'a) (b 'b) (c 'c) (d 'd))
          (fn-case
            ((a b) (list 'first a b c d))
            ((b) (list 'second a b c d))
            ((d c b a) (list 'third a b c d))
            ((a b c . d) (list 'fourth a b c d)))))
      (assert-equal '(second a 1 c d) (f 1))
      (assert-equal '(first 1 2 c d) (f 1 2))
      (assert-equal '(third 4 3 2 1) (f 1 2 3 4))
      (assert-equal '(fourth 1 2 3 (4 5 6)) (f 1 2 3 4 5 6))))

  (defgroup! fn-name
    (deftest! anonymous-function-name-is-nil
      (assert= nil (fn-name (fn () 1))))
    (deftest! function-name-set-with-def!
      (def! my-func (fn () 1))
      (assert= 'my-func (fn-name my-func)))
    (deftest! function-name-is-from-original-def!
      (def! my-func (fn () 1))
      (def! also-my-func my-func)
      (assert= 'my-func (fn-name also-my-func)))
    (deftest! function-name-is-nil-when-not-direct-child-of-def!
      (def! my-func (if true (fn () 1) (fn () 2)))
      (assert= nil (fn-name my-func)))
    (deftest! function-name-set-with-let
      (let ((my-func (fn () 1)))
        (assert= 'my-func (fn-name my-func))))
    (deftest! function-name-set-with-let*
      (let* ((val 2) (my-func (fn () val)))
        (assert= 'my-func (fn-name my-func))))
    (deftest! function-name-set-with-fn-named
      (assert= 'my-func (fn-name (fn-named my-func () 1)))))

  (defmacro! def-apply-tests! (group-name apply-fn)
    `(defgroup! ~group-name
      (deftest! apply-no-args
        (defn! f () 2)
        (assert= 2 (~apply-fn f nil)))
      (deftest! apply-1-arg
        (defn! f (x) (+ x 2))
        (assert= 3 (~apply-fn f (list 1))))
      (deftest! apply-to-variadic-function
        (defn! f (x . rest) (cons rest x))
        (assert-equal (cons (list 2 3) 1) (~apply-fn f (list 1 2 3))))
      (deftest! apply-too-few-args
       (defn! f (x y) (+ x y))
       (assert-error (~apply-fn f (list 1))))
      (deftest! apply-too-many-args
       (defn! f (x) (+ x 2))
       (assert-error (~apply-fn f (list 1 2))))))

  (def-apply-tests! apply apply)

  (defgroup! apply*
    (def-apply-tests! works-like-apply-with-1-arg apply*)

    (deftest! apply-1-arg-and-empty-list
      (defn! f (x) (+ x 2))
      (assert= 3 (apply* f 1 nil)))
    (deftest! apply-1-arg-and-singleton-list
      (defn! f (x y) (+ x y))
      (assert= 3 (apply* f 1 (list 2))))
    (deftest! apply-2-args-and-empty-list
      (defn! f (x y) (+ x y))
      (assert= 3 (apply* f 1 2 nil)))
    (deftest! apply-too-many-total-args
      (defn! f (x y) (+ x y))
      (assert-error (apply* f 1 (list 2 3)))))

  (defgroup! compose
    (deftest! no-functions-is-identity
      (assert= 'x ((compose) 'x))
      (assert-equal (cons 1 2) ((compose) (cons 1 2))))
    (deftest! functions-applied-from-right-to-left
      (def! f
        (compose (fn (x) (* x 2)) (fn (x) (+ x 1))))
      (assert= 6 (f 2))))

  (defgroup! pipe
    (deftest! no-functions-is-identity
      (assert= 'x (pipe 'x))
      (assert-equal (cons 1 2) (pipe (cons 1 2))))
    (deftest! functions-applied-from-left-to-right
      (assert= 5 (pipe 2 (* 2) (+ 1))))))
