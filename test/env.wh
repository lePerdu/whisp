(defgroup! environment
  (deftest! do-is-in-same-environment
    (do
      (def! a 5)
      nil)
    (assert= 5 a))

  (deftest! if-is-in-same-environment
    (if (= 1 1)
      (def! a 5))
    (assert= 5 a))

  (defgroup! closure
    (deftest! can-access-value-from-outer-environment
      (def! a 5)
      (defn! (f) a)
      (assert= 5 (f)))

    (deftest! can-access-value-defined-after
      (defn! (f) a)
      (def! a 5)
      (assert= 5 (f)))

    (deftest! argument-shadows-global
      (def! a 5)
      (defn! (f a) a)
      (assert= 2 (f 2)))

    (deftest! argument-shadows-global-defined-after
      (defn! (f a) a)
      (def! a 5)
      (assert= 2 (f 2)))

    (deftest! closes-value-from-defining-environment
      (defn! (make-f)
        (do
          (def! a 5)
          (fn () a)))
      (def! f (make-f))
      (assert= 5 (f)))

    (deftest! closes-value-from-outer-defining-environment
      (defn! (make-f)
        (fn () a))
      (def! a 5)
      (def! f (make-f))
      (assert= 5 (f)))

    (deftest! cannot-access-from-calling-environment
      (defn! (make-f)
        (fn () a))
      (def! f (make-f))
      (defn! (call-f)
        (do
          (def! a 5)
          (f)))
      (assert-error (call-f))))

  (defgroup! fn
    (deftest! bindings-shadow-outer
      (def! a 5)
      (defn! (f a) a)
      (assert= 4 (f 4)))

    (deftest! duplicate-binding-is-error
      (assert-error (fn (a a) a)))

    (deftest! creates-env-even-with-no-bindings
      (defn! (f) (def! a 5))
      (f)
      (assert-error a)))

  ; Basically the same tests for fn since let is just syntax on top of it
  (defgroup! let
    (deftest! bindings-shadow-outer
      (def! a 5)
      (assert= 4 (let ((a 4)) a)))

    (deftest! duplicate-binding-is-error
      (assert-error (let ((a 4) (a 3)) a)))

    (deftest! creates-env-even-with-no-bindings
      (let () (def! a 5))
      (assert-error a)))

  (defgroup! let*
    (deftest! bindings-shadow-outer
      (def! a 5)
      (assert= 4 (let* ((a 4)) a)))

    (deftest! creates-env-even-with-no-bindings
      (let* () (def! a 5))
      (assert-error a))

    (deftest! takes-latest-with-same-name
      (assert= 3 (let* ((a 4) (a (- a 1))) a)))

    (deftest! later-can-use-earlier
      (assert= 3 (let* ((a 4) (b (- a 1))) b)))

    (deftest! earlier-cannot-use-later
      (assert-error (let* ((a (- b 1)) (b 4)) a)))

    (deftest! binding-function-called-only-once
      (def! call-count (atom 0))
      (defn! (f) (do (swap! call-count inc) 5))
      (assert-equal (cons 5 10)
        (let*
          ((a (f)) (b (+ a a)))
          (cons a b)))
      (assert= 1 @call-count))))
